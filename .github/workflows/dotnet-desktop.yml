name: Build and Release

on:
  push:
    branches:
      - master  # Adjust this if your default branch is named differently

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET 8
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.x'

    - name: Restore dependencies
      run: dotnet restore DynamicIsland.csproj

    - name: Build
      run: dotnet build DynamicIsland.csproj --configuration Release

    - name: Publish
      run: dotnet publish DynamicIsland.csproj --configuration Release --output ./output

    - name: Create zip file
      run: zip -r DynamicIsland.zip ./output

    - name: Generate Version Tag
      id: generate_tag
      run: |
        VERSION=$(date +'%Y%m%d%H%M%S')
        echo "RELEASE_TAG=v${VERSION}" >> $GITHUB_ENV
        echo "Generated tag: v${VERSION}"
      env:
        DOTNET_ROOT: /usr/share/dotnet

    - name: Push Tag
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git tag "${{ env.RELEASE_TAG }}"
        git push origin "${{ env.RELEASE_TAG }}"
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Create Release
      id: create_release
      uses: actions/github-script@v6
      with:
        script: |
          const { data: release } = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: process.env.RELEASE_TAG,
            name: `Release ${process.env.RELEASE_TAG}`,
            draft: false,
            prerelease: false,
          });
          return release;
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Upload release asset
      uses: actions/github-script@v6
      with:
        script: |
          const release_id = context.runId;  // Get release ID from previous step
          const { data: release } = await github.rest.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo
          });
          const releaseDetails = release.find(r => r.tag_name === process.env.RELEASE_TAG);
          if (!releaseDetails) {
            throw new Error('Release not found');
          }

          await github.rest.repos.uploadReleaseAsset({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: releaseDetails.id,
            name: 'DynamicIsland.zip',
            data: require('fs').createReadStream('./DynamicIsland.zip'),
          });
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
